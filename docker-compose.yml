services:
  # Main Discord Bot Service
  blockate-audio-bot:
    build: ./bot
    image: blockate/audio-bot:latest
    container_name: blockate-audio-bot
    restart: unless-stopped
    environment:
      # Discord Configuration
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - OWNERS=${OWNERS}
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      
      # Notification Service
      - NTFY_AUTH=${NTFY_AUTH}
      - NTFY_USER=${NTFY_USER}
      - NTFY_PASSWORD=${NTFY_PASSWORD}
      
      # Audio Service
      - AUDIO_FILE_PROXY_AUTH=${AUDIO_FILE_PROXY_AUTH}
      - ROBLOX_ACCOUNT_COOKIE=${ROBLOX_ACCOUNT_COOKIE}
      
      # Node Environment
      - NODE_ENV=production
    
    volumes:
      # Bot data directory
      - ./bot/data:/app/data:rw
      # Shared IPC directory for communication with selfbot
      - ipc_volume:/app/ipc:rw
    
    networks:
      - blockate-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    depends_on:
      - ntfy
      - keydb

  # Discord Selfbot Service
  blockate-audio-selfbot:
    build: ./selfbot
    image: blockate/audio-selfbot:latest
    container_name: blockate-audio-selfbot
    restart: unless-stopped
    environment:
      # Discord Selfbot Configuration
      - ACCOUNT_TOKEN=${ACCOUNT_TOKEN}
      - ROBLOX_ACCOUNT_TOKEN=${ROBLOX_ACCOUNT_TOKEN}

      # Node Environment
      - NODE_ENV=production

    volumes:
      # Shared IPC directory for communication with main bot
      - ipc_volume:/app/ipc:rw

    networks:
      - blockate-network

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    depends_on:
      - blockate-audio-bot

  # KeyDB Service for pub/sub
  keydb:
    image: eqalpha/keydb:latest
    container_name: blockate-keydb
    command: keydb-server --bind 0.0.0.0 --port 6379
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - blockate-network

  # Optional: PostgreSQL database if needed locally
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: blockate-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-blockate}
  #     - POSTGRES_USER=${POSTGRES_USER:-postgres}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - blockate-network

networks:
  blockate-network:
    driver: bridge

# Define named volumes
volumes:
  # IPC volume with proper permissions for Unix socket communication
  ipc_volume:
    # This ensures the volume is created with proper permissions
    driver: local
  # Uncomment the volume below if using local PostgreSQL
  # postgres_data: